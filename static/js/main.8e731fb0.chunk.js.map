{"version":3,"sources":["components/Form.jsx","components/Appointment.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","createAppointment","useState","petName","ownerName","date","hour","symptoms","appointment","updateAppointment","error","setError","handleChange","event","target","name","value","className","onSubmit","preventDefault","trim","console","id","uuid","htmlFor","type","placeholder","onChange","Appointment","deteleAppointment","onClick","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","saveAppointments","useEffect","setItem","stringify","newAppointments","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8e731fb0.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ createAppointment }) => {\r\n  // Crear State de Citas\r\n  const [appointment, updateAppointment] = useState({\r\n    petName: '',\r\n    ownerName: '',\r\n    date: '',\r\n    hour: '',\r\n    symptoms: '',\r\n  });\r\n\r\n  // State de errores\r\n  const [error, setError] = useState(false);\r\n\r\n  // Función que se ejecuta cuando el usuario escribe en un input\r\n  const handleChange = (event) => {\r\n    updateAppointment({\r\n      ...appointment,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Extraer los valores\r\n  const { petName, ownerName, date, hour, symptoms } = appointment;\r\n\r\n  // Cuando el usuario envía el formulario\r\n  const submitAppointment = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Validar\r\n    if (petName.trim() === '' || ownerName.trim() === '' || date.trim() === '' || hour.trim() === '' || symptoms.trim() === '') {\r\n      setError(true);\r\n      console.error('Sorry, there was an error in the form.');\r\n      return;\r\n    }\r\n\r\n    // Eliminar mensaje de error previo\r\n    setError(false);\r\n\r\n    // Asignar ID\r\n    appointment.id = uuid();\r\n\r\n    // Crear la cita en el state principal\r\n    createAppointment(appointment);\r\n\r\n    // Reiniciar el form\r\n    updateAppointment({ petName: '', ownerName: '', date: '', hour: '', symptoms: '' });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Create Appointment</h2>\r\n      {error ? <p className=\"alerta-error\">Todos los campos son obligatorios.</p> : null}\r\n      <form onSubmit={submitAppointment}>\r\n        <label htmlFor=\"petName\">Pet Name</label>\r\n        <input type=\"text\" name=\"petName\" className=\"u-full-width\" placeholder=\"Pet Name\" onChange={handleChange} value={petName} />\r\n        <label htmlFor=\"ownerName\">Owner Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"ownerName\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Pet Owner's Name\"\r\n          onChange={handleChange}\r\n          value={ownerName}\r\n        />\r\n        <label htmlFor=\"date\">Date</label>\r\n        <input type=\"date\" name=\"date\" className=\"u-full-width\" onChange={handleChange} value={date} />\r\n        <label htmlFor=\"hour\">Hour</label>\r\n        <input type=\"time\" name=\"hour\" className=\"u-full-width\" onChange={handleChange} value={hour} />\r\n        <label htmlFor=\"symptoms\">Symptoms</label>\r\n        <textarea name=\"symptoms\" className=\"u-full-width\" onChange={handleChange} value={symptoms}></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Add Appointment\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  createAppointment: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Appointment = ({ appointment, deteleAppointment }) => {\r\n  const { petName, ownerName, date, hour, symptoms } = appointment;\r\n  return (\r\n    <div className=\"cita\">\r\n      <p>\r\n        Pet: <span>{petName}</span>\r\n      </p>\r\n      <p>\r\n        Owner: <span>{ownerName}</span>\r\n      </p>\r\n      <p>\r\n        Date: <span>{date}</span>\r\n      </p>\r\n      <p>\r\n        Hour: <span>{hour}</span>\r\n      </p>\r\n      <p>\r\n        Symptoms: <span>{symptoms}</span>\r\n      </p>\r\n\r\n      <button className=\"button eliminar u-full-width\" onClick={() => deteleAppointment(appointment.id)}>\r\n        Delete &times;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nAppointment.propTypes = {\r\n  appointment: PropTypes.object.isRequired,\r\n  deteleAppointment: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Appointment;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Form from './components/Form';\r\nimport Appointment from './components/Appointment';\r\n\r\nfunction App() {\r\n  // Citas en local storage\r\n  let initialAppointments = JSON.parse(localStorage.getItem('appointments'));\r\n  if (!initialAppointments) {\r\n    initialAppointments = [];\r\n  }\r\n\r\n  // Arreglo de citas\r\n  const [appointments, saveAppointments] = useState(initialAppointments);\r\n\r\n  // Use Effect para realizar operaciones cuando el state cambia\r\n  useEffect(() => {\r\n    localStorage.setItem('appointments', JSON.stringify(appointments));\r\n  }, [appointments, initialAppointments]);\r\n\r\n  // Función que tome las citas actuales y agregue la nueva\r\n  const createAppointment = (appointment) => {\r\n    saveAppointments([...appointments, appointment]);\r\n  };\r\n\r\n  // Funcion que elimina una cita por su ID\r\n  const deteleAppointment = (id) => {\r\n    const newAppointments = appointments.filter((appointment) => appointment.id !== id);\r\n    saveAppointments(newAppointments);\r\n  };\r\n\r\n  // Mensaje condicional\r\n  const title = appointments.length === 0 ? 'There are no appointments' : 'Manage your appointments';\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Patient Management</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"one-half column\">\r\n            <Form createAppointment={createAppointment} />\r\n          </div>\r\n          <div className=\"one-half column\">\r\n            <h2>{title}</h2>\r\n            {appointments.map((appointment) => (\r\n              <Appointment key={appointment.id} appointment={appointment} deteleAppointment={deteleAppointment} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}